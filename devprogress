
val termlist: ((Term * Term) list) ref = ref [];
fun AddTerm(t1,termlist) = (termlist := !termlist @ [t1]);
fun CleanTL(tl) = (tl := []);

(*This is the Unification and Substitution steps*)
type Substitution = string * int  -> Term;

val empty : Substitution = fn x => Var x;
fun addone (Var(a:string,b:int)) = (OutLine("Addone called");Var(a,b+1));
fun 
    value S (Var v) = (S v) |
    value S (Fun(f,args)) = (Fun (f,map (value S) args)); 
fun comp (S, R) = ((OutLine ("Comp called"); fn v => value S (R v)));
       
fun upd (v, t) S = (OutLine("Upd called for "^PrintTerm(Var v) ^ " and "^PrintTerm(t)); comp (fn w => if w = v then t else Var w, S));
fun upd''((Var v)::at,bh::bt) = 
       ( 
	OutLine("Attempting to re-pair "^PrintTerm(Var v)^ " and "^PrintTerm bh);	
	let val V = empty
	    val W = comp(V, (upd(v,bh)V)) 
	in
	if not(at = []) then comp(W,upd''(at,bt)) else W
        end )
 | upd''((Fun(v,args))::at,bh::bt) =
       (
	if not(at=[]) then upd''(at,bt) else empty
        );
 
fun upd'(t1 as(Fun(f, args1)),t2 as(Fun(y,args2))) = (OutLine("upd' called for "^PrintTerm(Fun(f,args1))^":"^PrintTerm(Fun(f,args2))); 
					if (t1=t2) then empty else if not(args1 = []) then upd''(args1,args2) else empty);
fun LevelUp(Var(x,y),level) = (OutLine("Leveling up "^x^" to "^PrintTerm(Var(x,level))); Var(x,level)) 
	|  LevelUp (Fun(f,args),level) = Fun(f, map(fn x => LevelUp(x,level)) args);
exception non_unifiable and solved and qsolved and occurs_check and length and next_in_list and non_solvable;
fun
  top S (Var v) = S v   |
  top S (x)     = x     ;
fun
  pairup (nil, nil)             = nil                    |
  pairup (a::b, c::d)           = (a,c)::(pairup (b,d))  |
  pairup (_)                    = raise length;
 
fun
  occurs v (Var w)         =  (v = w)                    |
  occurs v (Fun (f, args)) =  List.exists (occurs v) args;
 
fun unify' ((t1,t2),S)  =
    let
        val t1' = top S t1 and t2' = top S t2;
    in
        case (t1', t2') of
                (Var v,Var w)        => if (v=w) then (upd(v,(t2'))S) else (upd(v,(t2'))S)                      |
                (Var v, _)           => if occurs v t2 then raise occurs_check else upd(v,t2')S |
                (_, Var w)           => if occurs w t1 then raise occurs_check else upd(w,t1')S |
                (Fun (f1, args1), Fun (f2, args2)) =>
                        if f1=f2 then foldr unify' S (pairup(args1, args2)) else raise non_unifiable
    end;
fun unify (t1,t2,level,nil) =
			(
			let val R = (unify' ((t1,t2),empty)
			    handle occurs_check => raise non_unifiable
				|length         => raise non_unifiable)
			in
			OutLine("Unify was successful for "^PrintTerm t1^" and "^PrintTerm t2^"::NIL"); 
			 comp(R,upd'(t1,LevelUp((t2),level)))
			end);
 
(*Search and P1-P3 will navigate the list of terms and clean out any duplicate terms prior to the final output. This can probably be done much more optimally, but I will re-iterate my novice status of functional programming languages here)*)
fun Search(st : Term, []) = false | Search(st : Term, (tlh1,tlh2)::tlt : (Term * Term) list) = if (st=tlh1) then true else Search(st,tlt);
fun P3(xh::xt : Term list,zh::zt : Term list) = 
		if xt = [] 
		then (if not(Search(xh,!termlist)) 
		      then if not(xh=zh) 
                           then (OutLine("Adding term to termlist"); AddTerm((xh,zh),termlist)) 
                           else () 
                      else ()) 
               else (if not(Search(xh,!termlist)) 
                     then (if not(xh=zh) 
                           then (OutLine("Additng term to termlist"); AddTerm((xh,zh),termlist))
                           else (); 
                           P3(xt,zt)) 
                     else (P3(xt,zt))); 
fun P2(Fun(x,xlist),Fun(z,zlist)) = P3(xlist,zlist);
fun P1(yh, S) = (OutLine("Searching for "^ PrintTerm yh^ " paird with "^PrintTerm(value S yh)); P2(yh, (value S yh)));

fun yheadcheck(Fun(f,_),Fun(g,_)) = if (f=g) then true else false;
fun checker(term,(yh::yt)) = (OutLine("Checker called, "^PrintTerm term ^ "  " ^ PrintTerm yh); if (term = yh) then true else false);	
(*This is the solver*)	  

fun Solver(y as (yhead::ytail), ((Headed(hch,hct))::dbtail),database,querylist,counter,level) =(
	OutLine("First, perform unification on proper thing:");
	if (not(hct = []))
	then(
	 OutLine("Rule Detected");
	let
	   val S = unify(hch,yhead,level,nil) 
		      handle non_unifiable => raise non_solvable;
	in
	   OutLine("Made it to solver");
	  comp(S,Solver((((map (value S) hct))),database,database,querylist,counter,(level+1))
		      handle non_solvable => if (dbtail=[]) then raise non_solvable
						            else comp(S,Solver(y,dbtail,database,querylist,counter,level)
								  handle non_solvable => raise non_solvable))
	end ) 
	else (
	OutLine("Current List: "^PrintList y);
	 let
	  val S = unify(yhead,hch,level,nil)
		    handle non_unifiable => raise non_solvable;
	in
	   	if not(ytail = [])
		then
		comp(S,Solver((map (value S) ytail),database,database,querylist,counter,level)
		    handle non_solvable => if (dbtail=[]) then raise non_solvable
						else comp(S,Solver(y,dbtail,database,querylist,counter,level)
							handle non_solvable => raise non_solvable))
		else S
	end )

)

(*
fun Solver(y as (yhead::ytail), ((Headed(hch,[]))::dbtail), database, querylist, counter, level) =
	(
	OutLine("Trying to call unify on fact"^PrintTerm(yhead)^"|"^PrintTerm(hch));
	let val S = unify(yhead,hch,level,nil)
		     handle non_unifiable => (if (dbtail = []) then (OutLine("This query could not be unified with the current settings and is therefore not solvable"); raise non_solvable)
								else (OutLine("Still trying to unify this query -- Moving to the next thing in the database");
q
								      Solver(y,dbtail,database,querylist,counter,level)
									    handle non_solvable => raise non_solvable
										 ))
	in
		OutLine("|We've got a query! Since the headed clause had no tail, we know that we have a fact");
		OutLine("|Facts about our query");
		OutLine("|Query:           "^PrintTerm yhead);
		OutLine("|Fact :           "^PrintTerm hch);
		OutLine("|Fact after Subst:"^PrintTerm (value S yhead));
		OutLine("|List of Facts Remaining"^PrintList ytail);
		OutLine("|After substitutions:"^PrintList (map (value S) ytail)); 
		if (not(ytail=[])) (*We still have more to do*)
		then (OutLine("|Since our list isn't empty, we aren't done yet!");
		      OutLine("|Moving to the next term:                       ");
			if checker(yhead,ytail) then (OutLine("|Looks like the obvious is being stated\n|"^PrintTerm yhead^" and "^PrintTerm (value S yhead)^ " are the same!\n|Sending our unmodified substitution back up! ");S) else
			comp(S, Solver((map (value S) ytail), database, database, querylist, counter, level)
				handle non_solvable => if (dbtail = []) then (OutLine("This query needs to be backtracked, because we've run out of things to try. Therefore, with the current configuration, this query is impossible"); 
									      raise non_solvable)
									else (									       
								              OutLine("Something went wrong. No matter - this just means that "^PrintTerm hch^" is not the best fit for " ^PrintTerm yhead);
									      OutLine("We're going to try again with the rest of the tail! (As long as there is still more tail"); 
									      comp (S, Solver(y,dbtail,database,querylist,counter,level)
									            handle non_solvable => raise non_solvable)
										     ))
		     )
		else (OutLine("End of y list"); S)
	end
	)
 |  Solver(y as (yhead::ytail), ((Headed(hch,hct))::dbtail), database, querylist, counter, level) = 
	(
	OutLine("2Trying to call unify on rule"^PrintTerm(yhead)^"|"^PrintTerm(hch));
	let val S = unify(hch,yhead,level,nil)
		    handle non_unifiable => (if(dbtail = []) then (OutLine("This query could not be unified with the current settings and is therefore not solvable (rule)"); raise non_solvable)  (*Current query in list doesn't work. No matter. Next in line! *)
							     else (OutLine("Still trying to unify this query -- moving to the next thing in the database(rule)"); Solver(y,dbtail,database,querylist,counter,level)))
	in	
		OutLine("|~~~We've discovered a rule!~~~");
		OutLine("|Fun facts:                    ");
		OutLine("|Our variables:        "^PrintTerm yhead);
		OutLine("|Our Rule:"^PrintClause (Headed(hch,hct)));
		OutLine("|After Application"^PrintTerm(value S hch) ^":-"^PrintList(map(value S) hct));
		OutLine("yheadchecking "^PrintTerm yhead^" "^PrintTerm hch);
		if (yheadcheck(yhead,hch))
		then(
		OutLine("We are going to attempt to solve the tail of the rule");
		OutLine("Output will be a successful substitution (hopefully)");
		let val Y =  
		comp(S,Solver((map (value S) hct),database,database,querylist,counter,(level+1))
		 handle non_solvable => if (dbtail = []) then (OutLine("The rule is utterly non-solvable, and we must backtrack"); (* There's actually soemthing wrong with this rule. This implies that whatever we mapped didn't go through, and we have nothing left to try *)
							 raise non_solvable) 
							 else (OutLine("THIS GOT CALLED"); (* This hapens when some subrule fails, and we need to try a different subrule *)
							      (let val Z = comp (S,(Solver((map (value S) hct),dbtail,database,querylist,counter,level)handle non_solvable => raise non_solvable))
							       in OutLine("We Resolved the case...now how do we get out?!"); 
								  upd'(yhead,(value Z(value S hch))) end)
							  ))
		in
		OutLine("This means our rule was successful(yay)");
		OutLine("Our rule needs to be able fill in any query blanks");
		OutLine("Query:           "^PrintTerm(yhead));
		OutLine("After Solve:     "^PrintTerm(value Y (value S hch))); 
		 upd'(yhead,(value Y (value S hch)))
		end
		)
		else (*We're done? May fail if more than one term in the rule*)S
	end
	);
*)


(*End Solver*)	
fun Print ((yhead::ytail),S) = 
	(
	  if not(ytail = nil) then (P1(yhead,S); Print(ytail,S)) else P1(yhead,S) 
	);
fun OQHelper(y as (yhead::ytail),database as (dbh::dbt), dbase,yl,0,1) = 
	Solver(y,database,dbase,yl,0,1)
		 handle non_solvable => if not(dbt=[]) then OQHelper(y,dbt,database,y,0,1) else raise non_solvable
(*OutQuery - Handles the initial call to the solver. Handles a few special cases as well*)
fun OutQuery (y as (yhead::ytail) : Term list, database as (dbh::dbt) : HornClause list) =
	(
	 let  
	     val V = OQHelper(y,database,database,y,0,1)
		handle non_solvable => raise non_solvable
	 in 
	     Print(y,V)
         end
 	);
(*End OutQuery*)

fun Prolog (x as (Headed (Var _, _))) =
    OutLine ("Illegal clause:  " ^ PrintClause x)
   |Prolog (x as (Headless (Var _ :: _))) =
    OutLine ("Illegal clause:  " ^ PrintClause x)
  | Prolog (Headed (Fun ("init", nil),nil)) = InitDB ()
  | Prolog (x as (Headed _)) = Assert x
  | Prolog (x as Headless y) =
    (
     CleanTL(termlist); 
     OutLine ("query:  " ^ PrintClause x);
     OutQuery (y, !db)
      handle non_solvable => OutLine ("No");
     OutSol(!termlist) 
   );


